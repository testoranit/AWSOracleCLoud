6 R's of Migration.
1)Rehost:- eg:- migrate vm to cloud and do some changes(do it manual or automatic(using cloud Migration service)
2)Replatform eg:- when u migrate a db or SaaS
3)Repurchase
4)Refactor-Rearchitect
5)Retain
6)Retire

Real-World Scenario
Let's consider a retail company migrating its IT infrastructure to AWS:

Rehost: They move their inventory management system, running on an on-premises Oracle database, directly to an Amazon RDS for Oracle instance without making any changes to the application code.
Replatform: Their customer-facing website, currently hosted on a virtual machine, is moved to Amazon EC2 instances, and they switch from a self-managed MySQL database to Amazon RDS for MySQL for better performance and managed services.
Repurchase: For their internal communication, they switch from a self-hosted email server to using Office 365.
Refactor: Their legacy monolithic application for processing online orders is broken down into microservices using AWS Lambda, Amazon SQS, and DynamoDB to improve scalability and fault tolerance.
Retire: They identify old backup systems and archival services that are no longer needed and decommission them.
Retain: They keep their ERP system on-premises due to specific customization and compliance requirements while integrating it with AWS services using AWS Direct Connect for hybrid connectivity.
By employing the 6 R's of migration, the retail company strategically moves its workloads to the cloud, optimizing performance, cost, and compliance.







Oracle on Ec2 migration to AWS RDS.

expdp of source schema
(schema level and object level migartion possible, but you can' to full db migration using datapump since you don't have access to SYS schema of AWS RDS)

Yes, you can store an RMAN (Recovery Manager) backup of your on-premises Oracle database in Amazon S3. This process involves creating an RMAN backup, transferring the backup files to S3, and optionally using AWS Database Migration Service (DMS) to restore the backup to an Amazon RDS for Oracle instance. Here are the steps to accomplish this:

### Steps to Store RMAN Backup in S3

1. **Create RMAN Backup**:
    - Connect to your on-premises Oracle database and create an RMAN backup.
    - Example RMAN backup script:
        ```sql
        RMAN> BACKUP DATABASE FORMAT '/path_to_backup/backup_%U.bkp';
        ```

2. **Transfer Backup Files to S3**:
    - Install and configure the AWS CLI on your on-premises server.
    - Use the AWS CLI to transfer the RMAN backup files to an S3 bucket.
    - Example AWS CLI command to upload files:
        ```sh
        aws s3 cp /path_to_backup/backup_*.bkp s3://your-bucket-name/backup/
        ```

3. **Restore Backup to Amazon RDS for Oracle**:
    - **Option 1: Restore RMAN Backup to an EC2 Instance**:
        - Launch an EC2 instance with Oracle installed.
        - Transfer the backup files from S3 to the EC2 instance.
        - Use RMAN to restore the backup on the EC2 instance.
        - Example command to download from S3:
            ```sh
            aws s3 cp s3://your-bucket-name/backup/ /local_backup_path/ --recursive
            ```
        - Example RMAN restore script:
            ```sql
            RMAN> RESTORE DATABASE FROM '/local_backup_path/backup_*.bkp';
            RMAN> RECOVER DATABASE;
            RMAN> ALTER DATABASE OPEN;
            ```

    - **Option 2: Use AWS Database Migration Service (DMS)**:
        - Set up AWS DMS to migrate your on-premises Oracle database to RDS for Oracle.
        - AWS DMS can be used to perform a full load migration followed by ongoing replication to keep the source and target databases in sync.

### Detailed Example: Storing RMAN Backup in S3 and Restoring on EC2

1. **Create RMAN Backup on On-Premises Database**:
    ```sql
    RMAN> BACKUP DATABASE FORMAT '/backup_path/backup_%U.bkp';
    ```

2. **Install and Configure AWS CLI on On-Premises Server**:
    ```sh
    sudo apt-get install awscli   # For Debian/Ubuntu
    sudo yum install awscli       # For RHEL/CentOS
    aws configure
    ```

3. **Upload RMAN Backup Files to S3**:
    ```sh
    aws s3 cp /backup_path/backup_*.bkp s3://your-bucket-name/backup/
    ```

4. **Launch an EC2 Instance and Configure It**:
    - Launch an EC2 instance with a compatible Oracle version.
    - Ensure the EC2 instance has IAM permissions to access the S3 bucket.

5. **Download Backup Files from S3 to EC2**:
    ```sh
    aws s3 cp s3://your-bucket-name/backup/ /local_backup_path/ --recursive
    ```

6. **Restore RMAN Backup on EC2**:
    ```sql
    RMAN> RESTORE DATABASE FROM '/local_backup_path/backup_*.bkp';
    RMAN> RECOVER DATABASE;
    RMAN> ALTER DATABASE OPEN;
    ```

### Considerations

- **Security**: Ensure your S3 bucket is secured with appropriate IAM policies and encryption.
- **Network Transfer**: Consider network bandwidth and transfer times when uploading large backups to S3.
- **Backup Validation**: Validate the integrity of your backups before and after transfer to ensure data consistency.
- **Cost**: Be aware of storage costs associated with storing large backups in S3.

By following these steps, you can effectively store your RMAN backups in Amazon S3 and restore them as needed, providing a flexible and scalable backup solution for your Oracle databases.

create db link on source
CREATE DATABASE LINK RDSPDB
CONNECT TO admin IDENTIFIED BY tsgsupportkey
USING '(DESCRIPTION=
          (ADDRESS=(PROTOCOL=TCP)(HOST=rdspdb.crit5ered0ee.us-east-1.rds.amazonaws.com)(PORT=1521))
          (CONNECT_DATA=(SID=ORCL)))';

Transfer the dumpfile to AWS RDS(AWS RDS is also hosted on EC2 in the background)
BEGIN
DBMS_FILE_TRANSFER.PUT_FILE(
source_directory_object => 'data_pump_dir',
source_file_name => 'expdpsam_user26apr.dmp',
destination_directory_object => 'DATA_PUMP_DIR',
destination_file_name => 'expdpsam_user26apr.dmp',
destination_database => 'RDSPDB' );
END;
/

and then do impdp
impdp admin@rdspdb DIRECTORY=DATA_PUMP_DIR dumpfile=expdpsam_user26apr.dmp logfile=expdp27apr.log remap_schema=sam_user:sam_user remap_tablespace=SAMP_T:USers


The dump file on RDS server takes space and this space is counted towards RDS usage. Its a good idea to delete this dump file

On RDS:
=======
exec utl_file.fremove('DATA_PUMP_DIR','expdpsam_user26apr.dmp');

Import the dump file (which is not available on RDS server) into RDS. You run the impdp on source server on RDS via oracle networking

On source:
==========
impdp admin@rdspdb DIRECTORY=DATA_PUMP_DIR dumpfile=scott.dmp logfile=import.log

In the context of Amazon RDS for Oracle, you cannot directly access the underlying file system to run commands like `impdp` from a command-line interface on the RDS instance itself. Instead, you need to use a database client to connect to the RDS instance and then run the import command. Here are the detailed steps:

### Steps to Run the Import Command

1. **Prepare Your Environment**
   - Ensure that your local machine or EC2 instance has Oracle SQL*Plus and Oracle Data Pump utilities installed.
   - Ensure network connectivity to your RDS instance. This typically involves configuring security groups and network settings.

2. **Set Up the RDS Instance**
   - Create an RDS directory object and grant necessary permissions if not already done:
     ```sql
     EXEC rdsadmin.rdsadmin_util.create_directory('DATA_PUMP_DIR');
     GRANT READ, WRITE ON DIRECTORY DATA_PUMP_DIR TO your_rds_user;
     ```

3. **Copy the Dump File from S3 to RDS**
   - Use the `DBMS_CLOUD` or similar package to copy the dump file from S3 to the RDS instance directory:
     ```sql
     BEGIN
       DBMS_CLOUD.COPY_DATA(
         credential_name => 'my_s3_credentials',
         directory_name  => 'DATA_PUMP_DIR',
         file_name       => 'your_schema.dmp',
         uri_list        => 'https://your-bucket-name.s3.amazonaws.com/your_schema.dmp'
       );
     END;
     ```

4. **Run the Import Command**
   - Connect to the RDS instance using a database client like SQL*Plus or SQL Developer from your local machine or an EC2 instance.
   - Use the `impdp` utility to import the schema. Since you cannot run `impdp` directly on RDS, you will execute it from your local environment or EC2 instance.
   - Example command to run from your local machine or EC2 instance:
     ```sh
     impdp your_rds_user/password@your_rds_endpoint:1521/your_rds_db schemas=your_schema directory=DATA_PUMP_DIR dumpfile=your_schema.dmp logfile=import.log
     ```

### Detailed Example

#### 1. Configure the RDS Instance
   - Connect to your RDS instance using a database client (e.g., SQL*Plus):
     ```sh
     sqlplus your_rds_user@your_rds_endpoint:1521/your_rds_db
     ```
   - Create the directory and grant permissions:
     ```sql
     EXEC rdsadmin.rdsadmin_util.create_directory('DATA_PUMP_DIR');
     GRANT READ, WRITE ON DIRECTORY DATA_PUMP_DIR TO your_rds_user;
     ```

#### 2. Copy the Dump File from S3 to RDS
   - Run the following PL/SQL block to copy the file:
     ```sql
     BEGIN
       DBMS_CLOUD.COPY_DATA(
         credential_name => 'my_s3_credentials',
         directory_name  => 'DATA_PUMP_DIR',
         file_name       => 'your_schema.dmp',
         uri_list        => 'https://your-bucket-name.s3.amazonaws.com/your_schema.dmp'
       );
     END;
     ```

#### 3. Run the Import Command from Your Local Machine or EC2 Instance
   - Ensure you have Oracle SQL*Plus and Data Pump utilities installed.
   - Run the `impdp` command:
     ```sh
     impdp your_rds_user/password@your_rds_endpoint:1521/your_rds_db schemas=your_schema directory=DATA_PUMP_DIR dumpfile=your_schema.dmp logfile=import.log
     ```

### Notes

- **Network Configuration**: Ensure that your local machine or EC2 instance can connect to the RDS instance. This typically involves setting up the security group rules to allow inbound traffic on the required port (1521 for Oracle).
- **AWS Credentials**: Make sure the credentials used for `DBMS_CLOUD.COPY_DATA` have appropriate permissions to access the S3 bucket.
- **Error Handling**: Monitor the log files (`export.log` and `import.log`) for any errors during the export and import processes.

By following these steps, you can successfully import a schema from an on-premises Oracle database into an Amazon RDS for Oracle instance.
